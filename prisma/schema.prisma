// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/_prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 포스트 상태
enum PostStatus {
  DRAFT // 임시저장
  PUBLISHED // 발행됨
  ARCHIVED // 보관됨
}

// 관리자 권한
enum UserRole {
  ADMIN // 관리자
  SUPER_ADMIN // 슈퍼 관리자
}

// 댓글 상태
enum CommentStatus {
  PENDING // 승인 대기
  APPROVED // 승인됨
  REJECTED // 거부됨
}

// 이메일 발송 타입
enum EmailType {
  COMMENT_NOTIFICATION // 댓글 알림
  REPLY_NOTIFICATION // 답글 알림
}

// 이메일 발송 상태
enum EmailStatus {
  SENT // 발송 완료
  FAILED // 발송 실패
}

// 관리자 (나만 사용)
model User {
  id         String   @id @default(uuid())
  email      String   @unique
  username   String
  password   String // bcrypt 해시
  role       UserRole @default(ADMIN)
  image      String? // 프로필 이미지 URL
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // 관계
  posts       Post[] // 작성한 포스트들
  owned_blogs Blog[] // 소유한 블로그들 (임시)

  @@map("users")
}

// 블로그 (임시)
model Blog {
  id          String   @id @default(uuid())
  name        String   @unique // 블로그 이름 (URL용)
  title       String // 블로그 제목
  description String? // 블로그 설명
  owner_id    String // 블로그 소유자
  slug        String   @unique // URL 슬러그 (/blog/my-tech-blog)
  domain      String? // 커스텀 도메인 (선택사항)
  theme       String   @default("default") // 테마 설정
  is_active   Boolean  @default(true) // 활성화 상태
  is_public   Boolean  @default(true) // 공개/비공개
  settings    Json? // 블로그별 설정 (댓글 허용, 이메일 알림 등)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // 관계
  owner      User       @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  posts      Post[] // 블로그 포스트들
  categories Category[] // 블로그 카테고리들
  hashtags   Hashtag[] // 블로그 해시태그들
  comments   Comment[] // 블로그 댓글들

  @@map("blogs")
}

// 카테고리 (계층 구조)
model Category {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique // URL용 슬러그
  description String?
  parent_id   String? // 상위 카테고리 ID (null이면 최상위)
  order       Int      @default(0) // 정렬 순서
  level       Int      @default(0) // 계층 레벨 (0: 최상위, 1: 1단계 하위...)
  is_active   Boolean  @default(true) // 활성화 상태
  blog_id     String? // 블로그 ID (임시)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // 관계
  parent   Category?  @relation("CategoryHierarchy", fields: [parent_id], references: [id])
  children Category[] @relation("CategoryHierarchy")
  posts    Post[] // 카테고리에 속한 포스트들
  blog     Blog?      @relation(fields: [blog_id], references: [id], onDelete: Cascade) // 블로그 관계 (임시)

  @@map("categories")
}

// 해시태그
model Hashtag {
  id         String   @id @default(uuid())
  name       String   @unique
  blog_id    String? // 블로그 ID (임시)
  created_at DateTime @default(now())

  // 관계
  post_hashtags PostHashtag[] // M:N 관계를 위한 중간 테이블
  blog          Blog?         @relation(fields: [blog_id], references: [id], onDelete: Cascade) // 블로그 관계 (임시)

  @@map("hashtags")
}

// 블로그 포스트
model Post {
  id                 String     @id @default(uuid())
  title              String // 제목
  slug               String     @unique // URL용 슬러그
  content            String     @db.Text // 마크다운 내용
  excerpt            String? // 요약
  cover              String? // 커버 이미지
  status             PostStatus @default(DRAFT) // 포스트 상태
  published_at       DateTime? // 발행 시간
  category_id        String? // 카테고리 ID
  author_id          String // 작성자 ID
  blog_id            String? // 블로그 ID (임시)
  view_count         Int        @default(0) // 조회수
  likes_count        Int        @default(0) // 좋아요 수 (캐시)
  is_comment_enabled Boolean    @default(true) // 댓글 허용 여부
  seo_title          String? // SEO 제목
  seo_description    String? // SEO 설명
  created_at         DateTime   @default(now())
  updated_at         DateTime   @updatedAt

  // 관계
  author        User            @relation(fields: [author_id], references: [id], onDelete: Cascade)
  category      Category?       @relation(fields: [category_id], references: [id], onDelete: SetNull)
  blog          Blog?           @relation(fields: [blog_id], references: [id], onDelete: Cascade) // 블로그 관계 (임시)
  post_hashtags PostHashtag[] // M:N 관계를 위한 중간 테이블
  comments      Comment[] // 댓글들
  likes         PostLike[] // 좋아요들
  views         PostView[] // 조회 기록들
  images        UploadedImage[] // 업로드된 이미지들

  @@map("posts")
}

// 포스트-해시태그 중간 테이블 (Many-to-Many 관계)
model PostHashtag {
  post_id    String
  hashtag_id String

  // 관계
  post    Post    @relation(fields: [post_id], references: [id], onDelete: Cascade)
  hashtag Hashtag @relation(fields: [hashtag_id], references: [id], onDelete: Cascade)

  @@id([post_id, hashtag_id]) // 복합 기본 키
  @@map("post_hashtags")
}

// 포스트 좋아요 (IP 기반)
model PostLike {
  id           String   @id @default(uuid())
  post_id      String
  visitor_ip   String // 방문자 IP
  browser_info String? // 브라우저 정보
  created_at   DateTime @default(now())

  // 관계
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@unique([post_id, visitor_ip]) // 중복 방지
  @@map("post_likes")
}

// 댓글 (방문자용)
model Comment {
  id               String        @id @default(uuid())
  post_id          String // 포스트 ID
  blog_id          String? // 블로그 ID (임시)
  parent_id        String? // 답글용 부모 댓글 ID
  name             String // 방문자 닉네임
  email            String // 방문자 이메일
  password         String // 해시된 비밀번호 (수정/삭제용)
  content          String        @db.Text // 댓글 내용
  status           CommentStatus @default(PENDING) // 댓글 상태
  visitor_ip       String? // IP 주소
  browser_info     String? // 브라우저 정보
  is_reply         Boolean       @default(false) // 답글 여부
  admin_reply      String? // 관리자 답글
  admin_replied_at DateTime? // 답글 작성 시간
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt

  // 관계
  post    Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  blog    Blog?     @relation(fields: [blog_id], references: [id], onDelete: Cascade) // 블로그 관계 (임시)
  parent  Comment?  @relation("CommentReplies", fields: [parent_id], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@map("comments")
}

// 업로드된 이미지
model UploadedImage {
  id                String   @id @default(uuid())
  storage_filename  String // 저장된 파일명
  original_filename String // 원본 파일명
  file_path         String // 파일 경로
  file_size         Int // 파일 크기 (bytes)
  mime_type         String // MIME 타입
  alt_text          String? // 대체 텍스트
  post_id           String? // 연결된 포스트 ID
  created_at        DateTime @default(now())

  // 관계
  post Post? @relation(fields: [post_id], references: [id], onDelete: SetNull)

  @@map("uploaded_images")
}

// 포스트 조회 기록
model PostView {
  id           String   @id @default(uuid())
  post_id      String
  visitor_ip   String
  browser_info String?
  created_at   DateTime @default(now())

  // 관계
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@index([post_id])
  @@index([visitor_ip])
  @@map("post_views")
}

// 이메일 발송 로그
model EmailLog {
  id              String      @id @default(uuid())
  recipient_email String // 수신자
  subject         String // 제목
  type            EmailType // 이메일 타입
  status          EmailStatus // 발송 상태
  error_message   String? // 오류 메시지
  created_at      DateTime    @default(now())

  @@map("email_logs")
}
