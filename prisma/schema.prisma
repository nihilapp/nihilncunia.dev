// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/_prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum PublishType {
  PUBLIC
  PRIVATE
  PROTECTED
}

enum PostStatus {
  DRAFT // 임시저장
  ARCHIVED // 보관
  PENDING // 작성중
  COMPLETED // 작성완료
}

enum UserRole {
  ADMIN
  USER
}

enum DepthType {
  MAIN
  SUB
}

// 댓글 상태
enum CommentStatus {
  PENDING // 승인 대기
  APPROVED // 승인됨
  REJECTED // 거부됨
  SPAM // 스팸
}

// 사용자 정보
model User {
  id           String    @id @default(uuid())
  email        String    @unique
  username     String
  role         UserRole  @default(USER)
  image_url    String?
  last_sign_in DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  UserAuth UserAuth? // 1:1 관계
  posts    Post[] // 1:N 관계 (작성한 포스트들)
  comments Comment[] // 1:N 관계 (작성한 댓글들)

  @@map("users")
}

// 사용자 인증 정보
model UserAuth {
  id              String   @id @default(uuid())
  user_id         String   @unique // User 모델과의 관계를 위한 외래 키
  hashed_password String
  refresh_token   String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_auths")
}

// 카테고리 (메인/서브 통합)
model Category {
  id               String     @id @default(uuid())
  name             String
  description      String?
  color            String?
  depth            DepthType  @default(MAIN)
  parent_id        String?
  parent           Category?  @relation("CategoryToCategory", fields: [parent_id], references: [id])
  children         Category[] @relation("CategoryToCategory")
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  posts            Post[]     @relation("PostCategory") // 메인 카테고리로 연결된 포스트들
  subcategoryPosts Post[]     @relation("PostSubcategory") // 서브카테고리로 연결된 포스트들
  Post             Post[]

  @@unique([parent_id, name]) // 같은 부모 내에서 name 유니크
  @@map("categories")
}

// 해시태그
model Hashtag {
  id         String   @id @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  post_hashtags PostHashtag[] // M:N 관계를 위한 중간 테이블

  @@map("hashtags")
}

// 블로그 포스트
model Post {
  id         String      @id @default(uuid())
  title      String // 제목 (필수)
  content    String      @db.Text // 마크다운 형태의 글 내용 (필수)
  excerpt    String? // 글 요약 (선택)
  status     PostStatus  @default(DRAFT) // 현 상태 (임시저장, 보관, 작성중, 작성완료)
  publish    PublishType @default(PUBLIC) // 공개범위 (퍼블릭, 프라이빗, 프로텍티드)
  views      Int         @default(0) // 조회수
  likes      Int         @default(0) // 좋아요 수
  created_at DateTime    @default(now()) // 작성일자
  updated_at DateTime    @updatedAt // 수정일자

  // 관계
  user_id        String
  category_id    String
  subcategory_id String?

  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  category    Category  @relation("PostCategory", fields: [category_id], references: [id], onDelete: Cascade)
  subcategory Category? @relation("PostSubcategory", fields: [subcategory_id], references: [id], onDelete: SetNull)

  post_hashtags PostHashtag[] // M:N 관계를 위한 중간 테이블
  Category      Category?     @relation(fields: [categoryId], references: [id])
  categoryId    String?
  PostView      PostView[]
  PostLike      PostLike[]
  comments      Comment[] // 1:N 관계 (댓글들)

  @@map("posts")
}

// 포스트-해시태그 중간 테이블 (Many-to-Many 관계)
model PostHashtag {
  id         String   @id @default(uuid())
  post_id    String
  hashtag_id String
  created_at DateTime @default(now())

  post    Post    @relation(fields: [post_id], references: [id], onDelete: Cascade)
  hashtag Hashtag @relation(fields: [hashtag_id], references: [id], onDelete: Cascade)

  @@unique([post_id, hashtag_id]) // 동일한 포스트-해시태그 조합 중복 방지
  @@map("post_hashtags")
}

// 포스트 조회 이력
model PostView {
  id        String   @id @default(uuid())
  post_id   String
  user_id   String?
  ip        String?
  viewed_at DateTime @default(now())

  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@index([post_id])
  @@map("post_views")
}

// 포스트 좋아요 이력
model PostLike {
  id       String   @id @default(uuid())
  post_id  String
  user_id  String
  liked_at DateTime @default(now())

  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@unique([post_id, user_id])
  @@index([post_id])
  @@map("post_likes")
}

// 댓글
model Comment {
  id                String        @id @default(uuid())
  content           String        @db.Text
  author_name       String // 작성자 이름
  author_email      String // 작성자 이메일
  author_ip         String? // 작성자 IP
  password_hash     String // 비밀번호 해시 (수정/삭제용)
  status            CommentStatus @default(PENDING)
  post_id           String
  user_id           String?
  parent_comment_id String?
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt

  post    Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user    User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parent_comment_id], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@map("comments")
}
