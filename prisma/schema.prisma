// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/_prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  PENDING // 작성대기
  WRITING // 작성중
  COMPLETED // 작성완료
}

// 사용자 정보
model User {
  id           String    @id @default(uuid())
  email        String    @unique
  name         String
  image_url    String?
  last_sign_in DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  user_auth UserAuth? // 1:1 관계
  posts     Post[] // 1:N 관계 (작성한 포스트들)

  @@map("users")
}

// 사용자 인증 정보
model UserAuth {
  id              String   @id @default(uuid())
  user_id         String   @unique // User 모델과의 관계를 위한 외래 키
  hashed_password String
  refresh_token   String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_auths")
}

// 카테고리
model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String? // 카테고리 색상 (HEX 코드)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  subcategories Subcategory[] // 1:N 관계
  posts         Post[] // 1:N 관계

  @@map("categories")
}

// 서브카테고리
model Subcategory {
  id          String   @id @default(uuid())
  name        String
  slug        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // 관계
  category_id String
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  posts       Post[] // 1:N 관계

  @@unique([category_id, slug]) // 같은 카테고리 내에서 slug 유니크
  @@map("subcategories")
}

// 해시태그
model Hashtag {
  id         String   @id @default(uuid())
  name       String   @unique
  slug       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  post_hashtags PostHashtag[] // M:N 관계를 위한 중간 테이블

  @@map("hashtags")
}

// 블로그 포스트
model Post {
  id           String     @id @default(uuid())
  title        String // 제목 (필수)
  slug         String     @unique // URL용 slug (필수)
  content      String     @db.Text // 마크다운 형태의 글 내용 (필수)
  excerpt      String? // 글 요약 (선택)
  status       PostStatus @default(DRAFT) // 현 상태 (작성대기, 작성중, 작성완료)
  is_published Boolean    @default(false) // 공개여부 (true & false)
  views        Int        @default(0) // 조회수
  likes        Int        @default(0) // 좋아요 수
  created_at   DateTime   @default(now()) // 작성일자
  updated_at   DateTime   @updatedAt // 수정일자

  // 관계
  user_id        String
  category_id    String
  subcategory_id String? // 서브카테고리는 선택사항

  user        User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  category    Category     @relation(fields: [category_id], references: [id], onDelete: Cascade)
  subcategory Subcategory? @relation(fields: [subcategory_id], references: [id], onDelete: SetNull)

  post_hashtags PostHashtag[] // M:N 관계를 위한 중간 테이블

  @@map("posts")
}

// 포스트-해시태그 중간 테이블 (Many-to-Many 관계)
model PostHashtag {
  id         String   @id @default(uuid())
  post_id    String
  hashtag_id String
  created_at DateTime @default(now())

  post    Post    @relation(fields: [post_id], references: [id], onDelete: Cascade)
  hashtag Hashtag @relation(fields: [hashtag_id], references: [id], onDelete: Cascade)

  @@unique([post_id, hashtag_id]) // 동일한 포스트-해시태그 조합 중복 방지
  @@map("post_hashtags")
}
